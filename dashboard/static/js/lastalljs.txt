
// const charts = {
//     ordersRevenue: null,
//     yearlySales: null,
//     orderStatus: null,
//     paymentMethod: null,
//     avgOrderValue: null,
//     paymentPopularity: null
// };

// // Chart options
// const ordersRevenueOptions = {
//     responsive: true,
//     maintainAspectRatio: false,
//     scales: {
//         yOrders: {
//             type: 'linear',
//             position: 'left',
//             title: {
//                 display: true,
//                 text: 'Number of Orders'
//             },
//             grid: {
//                 display: false
//             }
//         },
//         yRevenue: {
//             type: 'linear',
//             position: 'right',
//             title: {
//                 display: true,
//                 text: 'Revenue ($)'
//             },
//             grid: {
//                 display: false
//             }
//         },
//         x: {
//             title: {
//                 display: true,
//                 text: 'Month'
//             },
//             grid: {
//                 display: false
//             }
//         }
//     },
//     plugins: {
//         title: {
//             display: true,
//             text: 'Orders and Revenue Over Time',
//             font: {
//                 size: 16
//             }
//         },
//         legend: {
//             position: 'top'
//         },
//         tooltip: {
//             mode: 'index',
//             intersect: false
//         }
//     },
//     interaction: {
//         mode: 'nearest',
//         intersect: false
//     }
// };

// const yearlySalesComparisonOptions = {
//     responsive: true,
//     maintainAspectRatio: false,
//     scales: {
//         y: {
//             title: {
//                 display: true,
//                 text: 'Sales ($)'
//             },
//             grid: {
//                 display: false
//             }
//         },
//         x: {
//             title: {
//                 display: true,
//                 text: 'Month'
//             },
//             grid: {
//                 display: false
//             }
//         }
//     },
//     plugins: {
//         title: {
//             display: true,
//             text: 'Yearly Sales Comparison',
//             font: {
//                 size: 16
//             }
//         },
//         legend: {
//             position: 'top'
//         },
//         tooltip: {
//             mode: 'index',
//             intersect: false
//         }
//     },
//     interaction: {
//         mode: 'nearest',
//         intersect: false
//     }
// };

// const orderStatusOptions = {
//     responsive: true,
//     maintainAspectRatio: false,
//     scales: {
//         y: {
//             title: {
//                 display: true,
//                 text: 'Average Order Total ($)'
//             },
//             grid: {
//                 display: false
//             }
//         },
//         x: {
//             title: {
//                 display: true,
//                 text: 'Order Status'
//             },
//             grid: {
//                 display: false
//             }
//         }
//     },
//     plugins: {
//         title: {
//             display: true,
//             text: 'Order Status Breakdown',
//             font: {
//                 size: 16
//             }
//         },
//         legend: {
//             display: false
//         }
//     }
// };

// const paymentMethodOptions = {
//     responsive: true,
//     maintainAspectRatio: false,
//     scales: {
//         y: {
//             title: {
//                 display: true,
//                 text: 'Total Revenue ($)'
//             },
//             grid: {
//                 display: false
//             }
//         },
//         x: {
//             title: {
//                 display: true,
//                 text: 'Payment Method'
//             },
//             grid: {
//                 display: false
//             }
//         }
//     },
//     plugins: {
//         title: {
//             display: true,
//             text: 'Revenue by Payment Method',
//             font: {
//                 size: 16
//             }
//         },
//         legend: {
//             display: false
//         }
//     }
// };

// const avgOrderValueOptions = {
//     responsive: true,
//     maintainAspectRatio: false,
//     scales: {
//         y: {
//             title: {
//                 display: true,
//                 text: 'Average Order Value ($)'
//             },
//             grid: {
//                 display: false
//             }
//         },
//         x: {
//             title: {
//                 display: true,
//                 text: 'Customer Email'
//             },
//             grid: {
//                 display: false
//             },
//             ticks: {
//                 maxRotation: 45,
//                 minRotation: 45
//             }
//         }
//     },
//     plugins: {
//         title: {
//             display: true,
//             text: 'Average Order Value by Customer',
//             font: {
//                 size: 16
//             }
//         },
//         legend: {
//             display: false
//         }
//     }
// };

// const paymentPopularityOptions = {
//     responsive: true,
//     maintainAspectRatio: false,
//     plugins: {
//         title: {
//             display: true,
//             text: 'Payment Method Popularity',
//             font: {
//                 size: 16
//             }
//         },
//         legend: {
//             position: 'top'
//         }
//     }
// };

// // Fetch and render dashboard data
// function fetchDashboardData() {
//     const dateRange = document.getElementById('dateRange').value || '365';
//     fetch(`/api/dashboard-data/?date_range=${dateRange}`)
//         .then(response => response.json())
//         .then(data => {
//             // Update KPI Cards
//             document.getElementById('todayCustomers').textContent = data.today_customers;
//             document.getElementById('todayProducts').textContent = data.today_products;
//             document.getElementById('totalOrders').textContent = data.total_orders;
//             document.getElementById('totalRevenue').textContent = `$${data.total_revenue.toLocaleString('en-US', { minimumFractionDigits: 2 })}`;

//             // Orders and Revenue Over Time
//             if (charts.ordersRevenue) charts.ordersRevenue.destroy();
//             charts.ordersRevenue = new Chart(document.getElementById('ordersRevenueChart'), {
//                 type: 'line',
//                 data: {
//                     labels: data.orders_revenue.labels,
//                     datasets: [
//                         {
//                             label: 'Orders',
//                             data: data.orders_revenue.orders,
//                             borderColor: '#007bff',
//                             yAxisID: 'yOrders',
//                             fill: false
//                         },
//                         {
//                             label: 'Revenue',
//                             data: data.orders_revenue.revenue,
//                             borderColor: '#28a745',
//                             yAxisID: 'yRevenue',
//                             fill: false
//                         }
//                     ]
//                 },
//                 options: ordersRevenueOptions
//             });

//             // Yearly Sales Comparison
//             if (charts.yearlySales) charts.yearlySales.destroy();
//             charts.yearlySales = new Chart(document.getElementById('yearlySalesChart'), {
//                 type: 'line',
//                 data: {
//                     labels: data.yearly_sales.labels,
//                     datasets: [
//                         {
//                             label: 'Sales',
//                             data: data.yearly_sales.sales,
//                             borderColor: '#ff073a',
//                             fill: false
//                         }
//                     ]
//                 },
//                 options: yearlySalesComparisonOptions
//             });

//             // Order Status Breakdown
//             if (charts.orderStatus) charts.orderStatus.destroy();
//             charts.orderStatus = new Chart(document.getElementById('orderStatusChart'), {
//                 type: 'bar',
//                 data: {
//                     labels: data.order_status.labels,
//                     datasets: [
//                         {
//                             label: 'Average Order Total',
//                             data: data.order_status.data,
//                             backgroundColor: '#007bff'
//                         }
//                     ]
//                 },
//                 options: orderStatusOptions
//             });

//             // Revenue by Payment Method
//             if (charts.paymentMethod) charts.paymentMethod.destroy();
//             charts.paymentMethod = new Chart(document.getElementById('paymentMethodChart'), {
//                 type: 'bar',
//                 data: {
//                     labels: data.payment_method.labels,
//                     datasets: [
//                         {
//                             label: 'Revenue',
//                             data: data.payment_method.data,
//                             backgroundColor: '#28a745'
//                         }
//                     ]
//                 },
//                 options: paymentMethodOptions
//             });

//             // Average Order Value by Customer
//             if (charts.avgOrderValue) charts.avgOrderValue.destroy();
//             charts.avgOrderValue = new Chart(document.getElementById('avgOrderValueChart'), {
//                 type: 'bar',
//                 data: {
//                     labels: data.avg_order_value.labels,
//                     datasets: [
//                         {
//                             label: 'Average Order Value',
//                             data: data.avg_order_value.data,
//                             backgroundColor: '#ff073a'
//                         }
//                     ]
//                 },
//                 options: avgOrderValueOptions
//             });

//             // Payment Method Popularity
//             if (charts.paymentPopularity) charts.paymentPopularity.destroy();
//             charts.paymentPopularity = new Chart(document.getElementById('paymentPopularityChart'), {
//                 type: 'doughnut',
//                 data: {
//                     labels: data.payment_popularity.labels,
//                     datasets: [
//                         {
//                             label: 'Popularity',
//                             data: data.payment_popularity.data,
//                             backgroundColor: ['#007bff', '#28a745', '#ff073a', '#ffc107', '#17a2b8']
//                         }
//                     ]
//                 },
//                 options: paymentPopularityOptions
//             });

//             // Recent Orders Table
//             const recentOrdersTableBody = document.getElementById('recentOrdersTableBody');
//             recentOrdersTableBody.innerHTML = '';
//             data.recent_orders.forEach(order => {
//                 const row = document.createElement('tr');
//                 row.innerHTML = `
//                     <td>${order.order_number}</td>
//                     <td>${new Date(order.created_at).toLocaleDateString()}</td>
//                     <td>${order.customer_name}</td>
//                     <td>$${order.total_price.toLocaleString('en-US', { minimumFractionDigits: 2 })}</td>
//                     <td>${order.order_status}</td>
//                 `;
//                 recentOrdersTableBody.appendChild(row);
//             });

//             // Top Products Table
//             const topProductsTableBody = document.getElementById('topProductsTableBody');
//             topProductsTableBody.innerHTML = '';
//             data.top_products.forEach(product => {
//                 const row = document.createElement('tr');
//                 row.innerHTML = `
//                     <td>${product.product}</td>
//                     <td>${product.count}</td>
//                 `;
//                 topProductsTableBody.appendChild(row);
//             });

//             // Discount Usage Table
//             const discountUsageTableBody = document.getElementById('discountUsageTableBody');
//             discountUsageTableBody.innerHTML = '';
//             data.discount_usage.forEach(discount => {
//                 const row = document.createElement('tr');
//                 row.innerHTML = `
//                     <td>${discount.coupon_code}</td>
//                     <td>${discount.times_used}</td>
//                 `;
//                 discountUsageTableBody.appendChild(row);
//             });
//         })
//         .catch(error => {
//             console.error('Error fetching dashboard data:', error);
//             alert('Failed to load dashboard data. Please try again.');
//         });
// }

// // Export dashboard as PDF using jsPDF with manual content rendering
// function exportDashboardAsPDF() {
//     setTimeout(() => {
//         const element = document.querySelector('.content');
//         if (!element) {
//             alert('Error: Dashboard content not found.');
//             return;
//         }

//         // Store the current state of accordion sections
//         const collapses = document.querySelectorAll('.accordion-collapse');
//         const collapseStates = Array.from(collapses).map(collapse => collapse.classList.contains('show'));

//         // Temporarily expand all accordion sections
//         collapses.forEach(collapse => collapse.classList.add('show'));

//         // Ensure charts are fully rendered by forcing a resize and disabling animations
//         Object.values(charts).forEach(chart => {
//             if (chart) {
//                 chart.options.animation = false;
//                 chart.resize();
//                 chart.update();
//             }
//         });

//         // Initialize jsPDF
//         const { jsPDF } = window.jspdf;
//         const doc = new jsPDF({
//             orientation: 'portrait',
//             unit: 'in',
//             format: 'letter'
//         });

//         // Page dimensions (letter size: 8.5in x 11in) with 0.5in margins
//         const pageWidth = 8.5 - 1;
//         const margin = 0.5;
//         let yPosition = margin;

//         // Helper function to add a new page if needed
//         const addNewPageIfNeeded = (requiredHeight) => {
//             if (yPosition + requiredHeight > 11 - margin) {
//                 doc.addPage();
//                 yPosition = margin;
//             }
//         };

//         // Helper function to add text with wrapping
//         const addText = (text, x, y, fontSize = 12, maxWidth = pageWidth) => {
//             doc.setFontSize(fontSize);
//             const lines = doc.splitTextToSize(text, maxWidth);
//             addNewPageIfNeeded(lines.length * (fontSize / 72));
//             doc.text(lines, x, y);
//             return lines.length * (fontSize / 72);
//         };

//         // 1. Add Navbar (Title and Date Range)
//         const navbar = document.querySelector('.navbar');
//         const title = navbar.querySelector('h1').textContent;
//         const dateRange = document.querySelector('#dateRange')?.value || 'Unknown Date Range';
//         yPosition += addText(title, margin, yPosition, 16);
//         yPosition += addText(`Date Range: ${dateRange}`, margin, yPosition, 10);
//         yPosition += 0.2;

//         // 2. Add KPI Cards
//         const statCards = document.querySelectorAll('.stat-card');
//         statCards.forEach(card => {
//             const label = card.querySelector('h3').textContent;
//             const value = card.querySelector('p').textContent;
//             addNewPageIfNeeded(0.3);
//             yPosition += addText(`${label}: ${value}`, margin, yPosition, 10);
//             yPosition += 0.1;
//         });
//         yPosition += 0.2;

//         // 3. Add Charts
//         const chartCanvases = document.querySelectorAll('.chart-container canvas');
//         const chartPromises = Array.from(chartCanvases).map((canvas, index) => {
//             const chart = Chart.getChart(canvas);
//             if (chart) {
//                 try {
//                     const imgData = chart.toBase64Image('image/png');
//                     if (!imgData.startsWith('data:image/png;base64,')) {
//                         throw new Error('Invalid chart image data');
//                     }

//                     const img = new Image();
//                     img.src = imgData;

//                     const chartTitles = {
//                         ordersRevenue: 'Orders and Revenue Over Time',
//                         yearlySales: 'Yearly Sales Comparison',
//                         orderStatus: 'Order Status Breakdown',
//                         paymentMethod: 'Revenue by Payment Method',
//                         avgOrderValue: 'Average Order Value by Customer',
//                         paymentPopularity: 'Payment Method Popularity'
//                     };
//                     const chartKey = Object.keys(charts).find(key => charts[key] === chart);
//                     const chartTitle = chart.options.plugins?.title?.text || chartTitles[chartKey] || `Chart ${index + 1}`;

//                     return new Promise((resolve, reject) => {
//                         img.onload = () => {
//                             const imgWidth = img.width;
//                             const imgHeight = img.height;

//                             const chartWidth = pageWidth;
//                             const chartHeight = (chartWidth / imgWidth) * imgHeight;

//                             addNewPageIfNeeded(0.2);
//                             yPosition += addText(chartTitle, margin, yPosition, 12);
//                             yPosition += 0.1;

//                             addNewPageIfNeeded(chartHeight);
//                             doc.addImage(imgData, 'PNG', margin, yPosition, chartWidth, chartHeight);
//                             yPosition += chartHeight + 0.2;

//                             resolve();
//                         };
//                         img.onerror = () => {
//                             addNewPageIfNeeded(0.2);
//                             yPosition += addText(`[Error rendering chart ${index + 1}]`, margin, yPosition, 10);
//                             yPosition += 0.1;
//                             resolve();
//                         };
//                     });
//                 } catch (error) {
//                     addNewPageIfNeeded(0.2);
//                     yPosition += addText(`[Error rendering chart: ${error.message}]`, margin, yPosition, 10);
//                     yPosition += 0.1;
//                     return Promise.resolve();
//                 }
//             }
//             return Promise.resolve();
//         });

//         Promise.all(chartPromises).then(() => {
//             // 4. Add Tables
//             const tables = [
//                 { title: 'Recent Orders', selector: '#recentOrdersTable' },
//                 { title: 'Top Products by Sales', selector: '#topProductsTable' },
//                 { title: 'Discount Usage Overview', selector: '#discountUsageTable' }
//             ];

//             tables.forEach(tableInfo => {
//                 const table = document.querySelector(tableInfo.selector);
//                 if (table) {
//                     addNewPageIfNeeded(0.2);
//                     yPosition += addText(tableInfo.title, margin, yPosition, 12);
//                     yPosition += 0.1;

//                     const headers = Array.from(table.querySelectorAll('thead th')).map(th => th.textContent.trim());
//                     const rows = Array.from(table.querySelectorAll('tbody tr')).map(row =>
//                         Array.from(row.querySelectorAll('td')).map(td => td.textContent.trim())
//                     );

//                     const tableData = rows.map(row => row.map(cell => ({ content: cell })));

//                     const rowHeight = 0.2;
//                     const tableHeight = (headers.length > 0 ? 1 : 0) + rows.length * rowHeight;

//                     addNewPageIfNeeded(tableHeight);
//                     doc.autoTable({
//                         head: [headers],
//                         body: rows,
//                         startY: yPosition,
//                         margin: { left: margin, right: margin },
//                         styles: { fontSize: 8, cellPadding: 0.1 },
//                         headStyles: { fillColor: [200, 200, 200], textColor: [0, 0, 0] },
//                         bodyStyles: { textColor: [0, 0, 0] }
//                     });

//                     yPosition = doc.lastAutoTable.finalY + 0.2;
//                 }
//             });

//             doc.save(`Dashboard_Export_${new Date().toISOString().split('T')[0]}.pdf`);

//             collapses.forEach((collapse, index) => {
//                 if (!collapseStates[index]) {
//                     collapse.classList.remove('show');
//                 }
//             });

//             Object.values(charts).forEach(chart => {
//                 if (chart) {
//                     chart.options.animation = true;
//                     chart.update();
//                 }
//             });
//         }).catch(error => {
//             alert('Failed to export as PDF. Please try again.');
//             collapses.forEach((collapse, index) => {
//                 if (!collapseStates[index]) {
//                     collapse.classList.remove('show');
//                 }
//             });
//             Object.values(charts).forEach(chart => {
//                 if (chart) {
//                     chart.options.animation = true;
//                     chart.update();
//                 }
//             });
//         });

//     }, 3000);
// }

// // Event Listeners
// document.addEventListener('DOMContentLoaded', () => {
//     fetchDashboardData();

//     // Date Range Filter
//     document.getElementById('dateRange').addEventListener('change', () => {
//         fetchDashboardData();
//     });

//     // Bootstrap handles the collapsible sidebar functionality via data-bs-toggle="collapse"
//     // No additional JavaScript is needed for the sidebar toggling
// });


// const charts = {
//     ordersRevenue: null,
//     yearlySales: null,
//     orderStatus: null,
//     paymentMethod: null,
//     avgOrderValue: null,
//     paymentPopularity: null
// };

// // Chart options (unchanged)
// const ordersRevenueOptions = {
//     responsive: true,
//     maintainAspectRatio: false,
//     scales: {
//         yOrders: {
//             type: 'linear',
//             position: 'left',
//             title: {
//                 display: true,
//                 text: 'Number of Orders',
//                 color: 'black'
//             },
//             grid: {
//                 display: false,
//                 color: 'rgba(0, 0, 0, 0.1)'
//             },
//             ticks: {
//                 color: 'black'
//             }
//         },
//         yRevenue: {
//             type: 'linear',
//             position: 'right',
//             title: {
//                 display: true,
//                 text: 'Revenue ($)',
//                 color: 'black'
//             },
//             grid: {
//                 display: false
//             },
//             ticks: {
//                 color: 'black',
//                 callback: function(value) {
//                     return '$' + value.toLocaleString();
//                 }
//             }
//         },
//         x: {
//             title: {
//                 display: true,
//                 text: 'Month',
//                 color: 'black'
//             },
//             grid: {
//                 display: false
//             },
//             ticks: {
//                 color: 'black'
//             }
//         }
//     },
//     plugins: {
//         title: {
//             display: true,
//             text: 'Orders and Revenue Over Time',
//             font: {
//                 size: 16,
//                 family: 'Roboto'
//             },
//             color: 'black'
//         },
//         legend: {
//             position: 'top',
//             labels: {
//                 color: 'black'
//             }
//         },
//         tooltip: {
//             mode: 'index',
//             intersect: false,
//             backgroundColor: 'rgba(255, 255, 255, 0.9)',
//             titleFont: { size: 14, family: 'Roboto', color: 'black' },
//             bodyFont: { size: 12, family: 'Roboto', color: 'black' },
//             titleColor: 'black',
//             bodyColor: 'black',
//             padding: 10,
//             cornerRadius: 5,
//             borderColor: 'rgba(0, 0, 0, 0.2)',
//             borderWidth: 1
//         }
//     },
//     interaction: {
//         mode: 'nearest',
//         intersect: false
//     }
// };

// const yearlySalesComparisonOptions = {
//     responsive: true,
//     maintainAspectRatio: false,
//     scales: {
//         y: {
//             title: {
//                 display: true,
//                 text: 'Sales ($)',
//                 color: 'black'
//             },
//             grid: {
//                 display: false,
//                 color: 'rgba(0, 0, 0, 0.05)'
//             },
//             ticks: {
//                 color: 'black',
//                 callback: function(value) {
//                     return '$' + value.toLocaleString();
//                 }
//             }
//         },
//         x: {
//             title: {
//                 display: true,
//                 text: 'Month',
//                 color: 'black'
//             },
//             grid: {
//                 display: false
//             },
//             ticks: {
//                 color: 'black'
//             }
//         }
//     },
//     plugins: {
//         title: {
//             display: true,
//             text: 'Yearly Sales Comparison',
//             font: {
//                 size: 16,
//                 family: 'Roboto'
//             },
//             color: 'black'
//         },
//         legend: {
//             position: 'top',
//             labels: {
//                 color: 'black'
//             }
//         },
//         tooltip: {
//             mode: 'index',
//             intersect: false,
//             backgroundColor: 'rgba(255, 255, 255, 0.9)',
//             titleFont: { family: 'Roboto', size: 14, color: 'black' },
//             bodyFont: { family: 'Roboto', size: 12, color: 'black' },
//             titleColor: 'black',
//             bodyColor: 'black',
//             padding: 10,
//             cornerRadius: 5,
//             borderColor: 'rgba(0, 0, 0, 0.2)',
//             borderWidth: 1,
//             callbacks: {
//                 label: function(context) {
//                     let label = context.dataset.label || '';
//                     if (label) {
//                         label += ': ';
//                     }
//                     if (context.parsed.y !== null) {
//                         label += new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(context.parsed.y);
//                     }
//                     return label;
//                 }
//             }
//         }
//     },
//     interaction: {
//         mode: 'nearest',
//         intersect: false
//     }
// };

// const orderStatusOptions = {
//     responsive: true,
//     maintainAspectRatio: false,
//     scales: {
//         y: {
//             title: {
//                 display: true,
//                 text: 'Average Order Total ($)',
//                 color: 'black'
//             },
//             grid: {
//                 display: false,
//                 color: 'rgba(0, 0, 0, 0.1)'
//             },
//             ticks: {
//                 color: 'black'
//             }
//         },
//         x: {
//             title: {
//                 display: true,
//                 text: 'Order Status',
//                 color: 'black'
//             },
//             grid: {
//                 display: false
//             },
//             ticks: {
//                 color: 'black'
//             }
//         }
//     },
//     plugins: {
//         title: {
//             display: true,
//             text: 'Order Status Breakdown',
//             font: {
//                 size: 16,
//                 family: 'Roboto'
//             },
//             color: 'black'
//         },
//         legend: {
//             display: false
//         },
//         tooltip: {
//             backgroundColor: 'rgba(255, 255, 255, 0.9)',
//             titleFont: { size: 14, family: 'Roboto', color: 'black' },
//             bodyFont: { size: 12, family: 'Roboto', color: 'black' },
//             titleColor: 'black',
//             bodyColor: 'black',
//             padding: 10,
//             cornerRadius: 5,
//             borderColor: 'rgba(0, 0, 0, 0.2)',
//             borderWidth: 1
//         }
//     }
// };

// const paymentMethodOptions = {
//     responsive: true,
//     maintainAspectRatio: false,
//     scales: {
//         y: {
//             title: {
//                 display: true,
//                 text: 'Total Revenue ($)',
//                 color: 'black'
//             },
//             grid: {
//                 display: false,
//                 color: 'rgba(0, 0, 0, 0.1)'
//             },
//             ticks: {
//                 color: 'black'
//             }
//         },
//         x: {
//             title: {
//                 display: true,
//                 text: 'Payment Method',
//                 color: 'black'
//             },
//             grid: {
//                 display: false
//             },
//             ticks: {
//                 color: 'black'
//             }
//         }
//     },
//     plugins: {
//         title: {
//             display: true,
//             text: 'Revenue by Payment Method',
//             font: {
//                 size: 16,
//                 family: 'Roboto'
//             },
//             color: 'black'
//         },
//         legend: {
//             display: false
//         },
//         tooltip: {
//             backgroundColor: 'rgba(255, 255, 255, 0.9)',
//             titleFont: { size: 14, family: 'Roboto', color: 'black' },
//             bodyFont: { size: 12, family: 'Roboto', color: 'black' },
//             titleColor: 'black',
//             bodyColor: 'black',
//             padding: 10,
//             cornerRadius: 5,
//             borderColor: 'rgba(0, 0, 0, 0.2)',
//             borderWidth: 1
//         }
//     }
// };

// const avgOrderValueOptions = {
//     responsive: true,
//     maintainAspectRatio: false,
//     scales: {
//         y: {
//             title: {
//                 display: true,
//                 text: 'Average Order Value ($)',
//                 color: 'black'
//             },
//             grid: {
//                 display: false,
//                 color: 'rgba(0, 0, 0, 0.1)'
//             },
//             ticks: {
//                 color: 'black'
//             }
//         },
//         x: {
//             title: {
//                 display: true,
//                 text: 'Customer Email',
//                 color: 'black'
//             },
//             grid: {
//                 display: false
//             },
//             ticks: {
//                 maxRotation: 45,
//                 minRotation: 45,
//                 color: 'black'
//             }
//         }
//     },
//     plugins: {
//         title: {
//             display: true,
//             text: 'Average Order Value by Customer',
//             font: {
//                 size: 16,
//                 family: 'Roboto'
//             },
//             color: 'black'
//         },
//         legend: {
//             display: false
//         },
//         tooltip: {
//             backgroundColor: 'rgba(255, 255, 255, 0.9)',
//             titleFont: { size: 14, family: 'Roboto', color: 'black' },
//             bodyFont: { size: 12, family: 'Roboto', color: 'black' },
//             titleColor: 'black',
//             bodyColor: 'black',
//             padding: 10,
//             cornerRadius: 5,
//             borderColor: 'rgba(0, 0, 0, 0.2)',
//             borderWidth: 1
//         }
//     }
// };

// const paymentPopularityOptions = {
//     responsive: true,
//     maintainAspectRatio: false,
//     plugins: {
//         title: {
//             display: true,
//             text: 'Payment Method Popularity',
//             font: {
//                 size: 16,
//                 family: 'Roboto'
//             },
//             color: 'black'
//         },
//         legend: {
//             position: 'top',
//             labels: {
//                 color: 'black'
//             }
//         },
//         tooltip: {
//             backgroundColor: 'rgba(255, 255, 255, 0.9)',
//             titleFont: { size: 14, family: 'Roboto', color: 'black' },
//             bodyFont: { size: 12, family: 'Roboto', color: 'black' },
//             titleColor: 'black',
//             bodyColor: 'black',
//             padding: 10,
//             cornerRadius: 5,
//             borderColor: 'rgba(0, 0, 0, 0.2)',
//             borderWidth: 1
//         }
//     }
// };

// function renderYearlySalesChart(chartData) {
//     const ctx = document.getElementById('yearlySalesChart').getContext('2d');

//     // Clean up previous instance
//     if (charts.yearlySales) charts.yearlySales.destroy();

//     // Recreate gradients for consistent styling
//     const gradientBlack = ctx.createLinearGradient(0, 0, 0, 200);
//     gradientBlack.addColorStop(0, 'rgba(0, 0, 0, 0.8)');
//     gradientBlack.addColorStop(1, 'rgba(0, 0, 0, 0.2)');

//     const gradientGray = ctx.createLinearGradient(0, 0, 0, 200);
//     gradientGray.addColorStop(0, 'rgba(0, 0, 0, 0.3)');
//     gradientGray.addColorStop(1, 'rgba(0, 0, 0, 0.1)');

//     // Apply same color logic based on number of datasets
//     chartData.datasets.forEach((dataset, index) => {
//         if (chartData.datasets.length === 1) {
//             // Single-line (custom range): use black gradient
//             dataset.borderColor = 'black';
//             dataset.backgroundColor = gradientBlack;
//         } else {
//             // Two-line (default): apply separate gradients
//             if (index === 0) {
//                 dataset.borderColor = 'black';
//                 dataset.backgroundColor = gradientBlack;
//             } else {
//                 dataset.borderColor = 'rgba(0, 0, 0, 0.5)';
//                 dataset.backgroundColor = gradientGray;
//             }
//         }
//         dataset.fill = true;
//         dataset.tension = 0.4;
//     });

//     charts.yearlySales = new Chart(ctx, {
//         type: 'line',
//         data: {
//             labels: chartData.labels,
//             datasets: chartData.datasets
//         },
//         options: yearlySalesComparisonOptions
//     });
// }


// // Fetch and render dashboard data
// function fetchDashboardData(startDate, endDate) {
//     let url;
//     const today = new Date();
//     let defaultStartDate;

//     if (!startDate || !endDate) {
//         // Default to last 1 year
//         defaultStartDate = new Date(today);
//         defaultStartDate.setFullYear(today.getFullYear() - 1);
//         startDate = defaultStartDate.toISOString().split('T')[0];
//         endDate = today.toISOString().split('T')[0];
//     }

//     url = `/api/dashboard-data/?start_date=${startDate}&end_date=${endDate}`;
//     console.log('Fetching data with URL:', url); // Debugging

//     fetch(url)
//         .then(response => response.json())
//         .then(data => {
//             console.log('Data received:', data); // Debugging

//             // Update KPI Cards
//             document.getElementById('todayCustomers').textContent = data.today_customers;
//             document.getElementById('todayProducts').textContent = data.today_products;
//             document.getElementById('totalOrders').textContent = data.total_orders;
//             document.getElementById('totalRevenue').textContent = `$${data.total_revenue.toLocaleString('en-US', { minimumFractionDigits: 2 })}`;

//             // Orders and Revenue Over Time
//             if (charts.ordersRevenue) charts.ordersRevenue.destroy();
//             charts.ordersRevenue = new Chart(document.getElementById('ordersRevenueChart'), {
//                 type: 'line',
//                 data: {
//                     labels: data.orders_revenue.labels,
//                     datasets: [
//                         {
//                             label: 'Orders',
//                             data: data.orders_revenue.orders,
//                             borderColor: 'black',
//                             backgroundColor: 'rgba(0, 0, 0, 0.2)',
//                             yAxisID: 'yOrders',
//                             fill: false,
//                             tension: 0.4,
//                             pointBackgroundColor: 'black',
//                             pointBorderColor: 'black',
//                             pointRadius: 4,
//                             pointHoverRadius: 6
//                         },
//                         {
//                             label: 'Revenue',
//                             data: data.orders_revenue.revenue,
//                             borderColor: 'rgba(0, 0, 0, 0.6)',
//                             backgroundColor: 'rgba(0, 0, 0, 0.1)',
//                             yAxisID: 'yRevenue',
//                             fill: false,
//                             tension: 0.4,
//                             pointBackgroundColor: 'rgba(0, 0, 0, 0.6)',
//                             pointBorderColor: 'rgba(0, 0, 0, 0.6)',
//                             pointRadius: 4,
//                             pointHoverRadius: 6
//                         }
//                     ]
//                 },
//                 options: ordersRevenueOptions
//             });

//             // Yearly Sales Comparison
//             // if (charts.yearlySales) charts.yearlySales.destroy();
//             // const yearlyChartCanvas = document.getElementById('yearlySalesChart');
//             // const yearlyCtx = yearlyChartCanvas.getContext('2d');
//             // const thisYearGradient = yearlyCtx.createLinearGradient(0, 0, 0, 200);
//             // thisYearGradient.addColorStop(0, 'rgba(0, 0, 0, 0.8)');
//             // thisYearGradient.addColorStop(1, 'rgba(0, 0, 0, 0.2)');
//             // const lastYearGradient = yearlyCtx.createLinearGradient(0, 0, 0, 200);
//             // lastYearGradient.addColorStop(0, 'rgba(0, 0, 0, 0.3)');
//             // lastYearGradient.addColorStop(1, 'rgba(0, 0, 0, 0.1)');

//             // charts.yearlySales = new Chart(yearlyChartCanvas, {
//             //     type: 'line',
//             //     data: {
//             //         labels: data.yearly_sales.labels,
//             //         datasets: [
//             //             {
//             //                 label: 'This Year Sales',
//             //                 data: data.yearly_sales.sales,
//             //                 borderColor: 'black',
//             //                 backgroundColor: thisYearGradient,
//             //                 fill: true,
//             //                 tension: 0.4,
//             //                 borderWidth: 3,
//             //                 pointRadius: 3,
//             //                 pointHoverRadius: 5,
//             //                 pointBackgroundColor: 'black',
//             //                 pointHoverBackgroundColor: 'rgba(0, 0, 0, 0.8)'
//             //             },
//             //             {
//             //                 label: 'Last Year Sales',
//             //                 data: data.yearly_sales.sales.map((_, i) => data.yearly_sales.sales[i] * 0.8),
//             //                 borderColor: 'rgba(0, 0, 0, 0.5)',
//             //                 backgroundColor: lastYearGradient,
//             //                 fill: true,
//             //                 tension: 0.4,
//             //                 borderWidth: 2,
//             //                 pointRadius: 3,
//             //                 pointHoverRadius: 5,
//             //                 pointBackgroundColor: 'rgba(0, 0, 0, 0.5)',
//             //                 pointHoverBackgroundColor: 'rgba(0, 0, 0, 0.7)'
//             //             }
//             //         ]
//             //     },
//             //     options: yearlySalesComparisonOptions
//             // });
            
//             renderYearlySalesChart(data.yearly_sales);


//             // Order Status Breakdown
//             if (charts.orderStatus) charts.orderStatus.destroy();
//             charts.orderStatus = new Chart(document.getElementById('orderStatusChart'), {
//                 type: 'bar',
//                 data: {
//                     labels: data.order_status.labels,
//                     datasets: [
//                         {
//                             label: 'Average Order Total',
//                             data: data.order_status.data,
//                             backgroundColor: 'rgba(0, 0, 0, 0.8)',
//                             borderRadius: 5
//                         }
//                     ]
//                 },
//                 options: orderStatusOptions
//             });

//             // Revenue by Payment Method
//             if (charts.paymentMethod) charts.paymentMethod.destroy();
//             charts.paymentMethod = new Chart(document.getElementById('paymentMethodChart'), {
//                 type: 'bar',
//                 data: {
//                     labels: data.payment_method.labels,
//                     datasets: [
//                         {
//                             label: 'Revenue',
//                             data: data.payment_method.data,
//                             backgroundColor: 'rgba(0, 0, 0, 0.8)',
//                             borderRadius: 5
//                         }
//                     ]
//                 },
//                 options: paymentMethodOptions
//             });

//             // Average Order Value by Customer
//             if (charts.avgOrderValue) charts.avgOrderValue.destroy();
//             charts.avgOrderValue = new Chart(document.getElementById('avgOrderValueChart'), {
//                 type: 'bar',
//                 data: {
//                     labels: data.avg_order_value.labels,
//                     datasets: [
//                         {
//                             label: 'Average Order Value',
//                             data: data.avg_order_value.data,
//                             backgroundColor: 'rgba(0, 0, 0, 0.8)',
//                             borderRadius: 5
//                         }
//                     ]
//                 },
//                 options: avgOrderValueOptions
//             });

//             // Payment Method Popularity
//             if (charts.paymentPopularity) charts.paymentPopularity.destroy();
//             charts.paymentPopularity = new Chart(document.getElementById('paymentPopularityChart'), {
//                 type: 'doughnut',
//                 data: {
//                     labels: data.payment_popularity.labels,
//                     datasets: [
//                         {
//                             label: 'Popularity',
//                             data: data.payment_popularity.data,
//                             backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],
//                             borderWidth: 1
//                         }
//                     ]
//                 },
//                 options: paymentPopularityOptions
//             });

//             // Recent Orders Table
//             const recentOrdersTableBody = document.getElementById('recentOrdersTableBody');
//             recentOrdersTableBody.innerHTML = '';
//             data.recent_orders.forEach(order => {
//                 const row = document.createElement('tr');
//                 row.innerHTML = `
//                     <td>${order.order_number}</td>
//                     <td>${new Date(order.created_at).toLocaleDateString()}</td>
//                     <td>${order.customer_name}</td>
//                     <td>$${order.total_price.toLocaleString('en-US', { minimumFractionDigits: 2 })}</td>
//                     <td>${order.order_status}</td>
//                 `;
//                 recentOrdersTableBody.appendChild(row);
//             });

//             // Top Products Table
//             const topProductsTableBody = document.getElementById('topProductsTableBody');
//             topProductsTableBody.innerHTML = '';
//             data.top_products.forEach(product => {
//                 const row = document.createElement('tr');
//                 row.innerHTML = `
//                     <td>${product.product}</td>
//                     <td>${product.count}</td>
//                 `;
//                 topProductsTableBody.appendChild(row);
//             });

//             // Discount Usage Table
//             const discountUsageTableBody = document.getElementById('discountUsageTableBody');
//             discountUsageTableBody.innerHTML = '';
//             data.discount_usage.forEach(discount => {
//                 const row = document.createElement('tr');
//                 row.innerHTML = `
//                     <td>${discount.coupon_code}</td>
//                     <td>${discount.times_used}</td>
//                 `;
//                 discountUsageTableBody.appendChild(row);
//             });
//         })
//         .catch(error => {
//             console.error('Error fetching dashboard data:', error);
//             alert('Failed to load dashboard data. Please try again.');
//         });
// }

// // Export dashboard as PDF using jsPDF with manual content rendering
// function exportDashboardAsPDF() {
//     setTimeout(() => {
//         const element = document.querySelector('.content');
//         if (!element) {
//             alert('Error: Dashboard content not found.');
//             return;
//         }

//         // Store the current state of accordion sections
//         const collapses = document.querySelectorAll('.accordion-collapse');
//         const collapseStates = Array.from(collapses).map(collapse => collapse.classList.contains('show'));

//         // Temporarily expand all accordion sections
//         collapses.forEach(collapse => collapse.classList.add('show'));

//         // Ensure charts are fully rendered by forcing a resize and disabling animations
//         Object.values(charts).forEach(chart => {
//             if (chart) {
//                 chart.options.animation = false;
//                 chart.resize();
//                 chart.update();
//             }
//         });

//         // Initialize jsPDF
//         const { jsPDF } = window.jspdf;
//         const doc = new jsPDF({
//             orientation: 'portrait',
//             unit: 'in',
//             format: 'letter'
//         });

//         // Page dimensions (letter size: 8.5in x 11in) with 0.5in margins
//         const pageWidth = 8.5 - 1;
//         const margin = 0.5;
//         let yPosition = margin;

//         // Helper function to add a new page if needed
//         const addNewPageIfNeeded = (requiredHeight) => {
//             if (yPosition + requiredHeight > 11 - margin) {
//                 doc.addPage();
//                 yPosition = margin;
//             }
//         };

//         // Helper function to add text with wrapping
//         const addText = (text, x, y, fontSize = 12, maxWidth = pageWidth) => {
//             doc.setFontSize(fontSize);
//             const lines = doc.splitTextToSize(text, maxWidth);
//             addNewPageIfNeeded(lines.length * (fontSize / 72));
//             doc.text(lines, x, y);
//             return lines.length * (fontSize / 72);
//         };

//         // 1. Add Navbar (Title and Date Range)
//         const navbar = document.querySelector('.navbar');
//         const title = navbar.querySelector('h1').textContent;
//         const dateRangeSelect = document.getElementById('dateRangeSelect').value;
//         let dateRangeText = dateRangeSelect === 'last_1_year' ? 'Last 1 Year' : 'Custom Date Range';
//         if (dateRangeSelect === 'custom') {
//             const startDate = document.getElementById('startDate').value;
//             const endDate = document.getElementById('endDate').value;
//             dateRangeText = `Custom: ${startDate} to ${endDate}`;
//         }
//         yPosition += addText(title, margin, yPosition, 16);
//         yPosition += addText(`Date Range: ${dateRangeText}`, margin, yPosition, 10);
//         yPosition += 0.2;

//         // 2. Add KPI Cards
//         const statCards = document.querySelectorAll('.stat-card');
//         statCards.forEach(card => {
//             const label = card.querySelector('h3').textContent;
//             const value = card.querySelector('p').textContent;
//             addNewPageIfNeeded(0.3);
//             yPosition += addText(`${label}: ${value}`, margin, yPosition, 10);
//             yPosition += 0.1;
//         });
//         yPosition += 0.2;

//         // 3. Add Charts
//         const chartCanvases = document.querySelectorAll('.chart-container canvas');
//         const chartPromises = Array.from(chartCanvases).map((canvas, index) => {
//             const chart = Chart.getChart(canvas);
//             if (chart) {
//                 try {
//                     const imgData = chart.toBase64Image('image/png');
//                     if (!imgData.startsWith('data:image/png;base64,')) {
//                         throw new Error('Invalid chart image data');
//                     }

//                     const img = new Image();
//                     img.src = imgData;

//                     const chartTitles = {
//                         ordersRevenue: 'Orders and Revenue Over Time',
//                         yearlySales: 'Yearly Sales Comparison',
//                         orderStatus: 'Order Status Breakdown',
//                         paymentMethod: 'Revenue by Payment Method',
//                         avgOrderValue: 'Average Order Value by Customer',
//                         paymentPopularity: 'Payment Method Popularity'
//                     };
//                     const chartKey = Object.keys(charts).find(key => charts[key] === chart);
//                     const chartTitle = chart.options.plugins?.title?.text || chartTitles[chartKey] || `Chart ${index + 1}`;

//                     return new Promise((resolve, reject) => {
//                         img.onload = () => {
//                             const imgWidth = img.width;
//                             const imgHeight = img.height;

//                             const chartWidth = pageWidth;
//                             const chartHeight = (chartWidth / imgWidth) * imgHeight;

//                             addNewPageIfNeeded(0.2);
//                             yPosition += addText(chartTitle, margin, yPosition, 12);
//                             yPosition += 0.1;

//                             addNewPageIfNeeded(chartHeight);
//                             doc.addImage(imgData, 'PNG', margin, yPosition, chartWidth, chartHeight);
//                             yPosition += chartHeight + 0.2;

//                             resolve();
//                         };
//                         img.onerror = () => {
//                             addNewPageIfNeeded(0.2);
//                             yPosition += addText(`[Error rendering chart ${index + 1}]`, margin, yPosition, 10);
//                             yPosition += 0.1;
//                             resolve();
//                         };
//                     });
//                 } catch (error) {
//                     addNewPageIfNeeded(0.2);
//                     yPosition += addText(`[Error rendering chart: ${error.message}]`, margin, yPosition, 10);
//                     yPosition += 0.1;
//                     return Promise.resolve();
//                 }
//             }
//             return Promise.resolve();
//         });

//         Promise.all(chartPromises).then(() => {
//             // 4. Add Tables
//             const tables = [
//                 { title: 'Recent Orders', selector: '#recentOrdersTable' },
//                 { title: 'Top Products by Sales', selector: '#topProductsTable' },
//                 { title: 'Discount Usage Overview', selector: '#discountUsageTable' }
//             ];

//             tables.forEach(tableInfo => {
//                 const table = document.querySelector(tableInfo.selector);
//                 if (table) {
//                     addNewPageIfNeeded(0.2);
//                     yPosition += addText(tableInfo.title, margin, yPosition, 12);
//                     yPosition += 0.1;

//                     const headers = Array.from(table.querySelectorAll('thead th')).map(th => th.textContent.trim());
//                     const rows = Array.from(table.querySelectorAll('tbody tr')).map(row =>
//                         Array.from(row.querySelectorAll('td')).map(td => td.textContent.trim())
//                     );

//                     const tableData = rows.map(row => row.map(cell => ({ content: cell })));

//                     const rowHeight = 0.2;
//                     const tableHeight = (headers.length > 0 ? 1 : 0) + rows.length * rowHeight;

//                     addNewPageIfNeeded(tableHeight);
//                     doc.autoTable({
//                         head: [headers],
//                         body: rows,
//                         startY: yPosition,
//                         margin: { left: margin, right: margin },
//                         styles: { fontSize: 8, cellPadding: 0.1 },
//                         headStyles: { fillColor: [200, 200, 200], textColor: [0, 0, 0] },
//                         bodyStyles: { textColor: [0, 0, 0] }
//                     });

//                     yPosition = doc.lastAutoTable.finalY + 0.2;
//                 }
//             });

//             doc.save(`Dashboard_Export_${new Date().toISOString().split('T')[0]}.pdf`);

//             collapses.forEach((collapse, index) => {
//                 if (!collapseStates[index]) {
//                     collapse.classList.remove('show');
//                 }
//             });

//             Object.values(charts).forEach(chart => {
//                 if (chart) {
//                     chart.options.animation = true;
//                     chart.update();
//                 }
//             });
//         }).catch(error => {
//             alert('Failed to export as PDF. Please try again.');
//             collapses.forEach((collapse, index) => {
//                 if (!collapseStates[index]) {
//                     collapse.classList.remove('show');
//                 }
//             });
//             Object.values(charts).forEach(chart => {
//                 if (chart) {
//                     chart.options.animation = true;
//                     chart.update();
//                 }
//             });
//         });

//     }, 3000);
// }

// // Event Listeners
// document.addEventListener('DOMContentLoaded', () => {
//     // Initial fetch with default "Last 1 Year"
//     fetchDashboardData();

//     // Handle dropdown change
//     const dateRangeSelect = document.getElementById('dateRangeSelect');
//     const customDateRange = document.getElementById('customDateRange');
//     const applyCustomDate = document.getElementById('applyCustomDate');
//     const startDateInput = document.getElementById('startDate');
//     const endDateInput = document.getElementById('endDate');

//     // Set default dates for custom range (for user convenience)
//     const today = new Date();
//     const lastYear = new Date(today);
//     lastYear.setFullYear(today.getFullYear() - 1);
//     endDateInput.value = today.toISOString().split('T')[0];
//     startDateInput.value = lastYear.toISOString().split('T')[0];

//     dateRangeSelect.addEventListener('change', () => {
//         if (dateRangeSelect.value === 'custom') {
//             customDateRange.style.display = 'flex';
//         } else {
//             customDateRange.style.display = 'none';
//             // Clear any selected dates
//             startDateInput.value = '';
//             endDateInput.value = '';
//             fetchDashboardData(); // This will now default correctly to last 1 year
//         }
//     });
    

//     applyCustomDate.addEventListener('click', () => {
//         const startDate = startDateInput.value;
//         const endDate = endDateInput.value;

//         if (!startDate || !endDate) {
//             alert('Please select both start and end dates.');
//             return;
//         }

//         const start = new Date(startDate);
//         const end = new Date(endDate);
//         const today = new Date();

//         if (start > end) {
//             alert('Start date must be before end date.');
//             return;
//         }

//         if (end > today) {
//             alert('End date cannot be in the future.');
//             return;
//         }

//         fetchDashboardData(startDate, endDate);
//     });

//     // Add a listener to the date inputs to fetch data when they change (optional, for better UX)
//     startDateInput.addEventListener('change', () => {
//         if (dateRangeSelect.value === 'custom') {
//             const startDate = startDateInput.value;
//             const endDate = endDateInput.value;
//             if (startDate && endDate) {
//                 const start = new Date(startDate);
//                 const end = new Date(endDate);
//                 const today = new Date();
//                 if (start <= end && end <= today) {
//                     fetchDashboardData(startDate, endDate);
//                 }
//             }
//         }
//     });

//     endDateInput.addEventListener('change', () => {
//         if (dateRangeSelect.value === 'custom') {
//             const startDate = startDateInput.value;
//             const endDate = endDateInput.value;
//             if (startDate && endDate) {
//                 const start = new Date(startDate);
//                 const end = new Date(endDate);
//                 const today = new Date();
//                 if (start <= end && end <= today) {
//                     fetchDashboardData(startDate, endDate);
//                 }
//             }
//         }
//     });
// });



lastviews.py 

# def get_dashboard_data(request):
#     # Parse date range from request (default to last 365 days)
#     start_date_str = request.GET.get('start_date')
#     end_date_str = request.GET.get('end_date')

#     if start_date_str and end_date_str:
#         try:
#             start_date = parse_date(start_date_str)
#             end_date = parse_date(end_date_str)
#             if not start_date or not end_date:
#                 raise ValueError
#         except ValueError:
#             end_date = timezone.now().date()
#             start_date = end_date - timedelta(days=365)
#     else:
#         end_date = timezone.now().date()
#         start_date = end_date - timedelta(days=365)

#     # Filter orders within the date range
#     orders = Order.objects.filter(created_at__range=[start_date, end_date])

#     # Today’s stats (for today’s customers and products)
#     today = timezone.now().date()
#     today_orders = Order.objects.filter(created_at__date=today)
#     today_customers = today_orders.values('customer_email').distinct().count()
#     today_products = 0  # Since products is a text field, we'll count unique products
#     for order in today_orders:
#         if order.products:
#             products = order.products.split(',')  # Assuming products are comma-separated
#             today_products += len(set(products))

#     # Total stats
#     total_orders = orders.count()
#     total_revenue = orders.aggregate(Sum('total_price'))['total_price__sum'] or 0

#     # Orders and Revenue Over Time
#     orders_by_month = orders.annotate(month=TruncMonth('created_at')).values('month').annotate(
#         order_count=Count('id'),
#         revenue=Sum('total_price')
#     ).order_by('month')
#     orders_revenue_data = {
#         'labels': [entry['month'].strftime('%b %Y') for entry in orders_by_month],
#         'orders': [entry['order_count'] for entry in orders_by_month],
#         'revenue': [float(entry['revenue']) for entry in orders_by_month]
#     }

#     # Yearly Sales Comparison
#     yearly_sales = orders.annotate(year=TruncYear('created_at')).values('year').annotate(
#         total_sales=Sum('total_price')
#     ).order_by('year')
#     yearly_sales_data = {
#         'labels': [entry['year'].strftime('%Y') for entry in yearly_sales],
#         'sales': [float(entry['total_sales']) for entry in yearly_sales]
#     }

#     # Order Status Breakdown
#     order_status = orders.values('order_status').annotate(
#         avg_total=Avg('total_price')
#     ).order_by('order_status')
#     order_status_data = {
#         'labels': [entry['order_status'] for entry in order_status],
#         'data': [float(entry['avg_total']) for entry in order_status]
#     }

#     # Revenue by Payment Method
#     payment_method = orders.values('payment_method').annotate(
#         total_revenue=Sum('total_price')
#     ).order_by('payment_method')
#     payment_method_data = {
#         'labels': [entry['payment_method'] for entry in payment_method],
#         'data': [float(entry['total_revenue']) for entry in payment_method]
#     }

#     # Average Order Value by Customer
#     avg_order_value = orders.values('customer_email').annotate(
#         avg_value=Avg('total_price')
#     ).order_by('-avg_value')[:5]  # Top 5 customers
#     avg_order_value_data = {
#         'labels': [entry['customer_email'] for entry in avg_order_value],
#         'data': [float(entry['avg_value']) for entry in avg_order_value]
#     }

#     # Payment Method Popularity
#     payment_popularity = orders.values('payment_method').annotate(
#         count=Count('id')
#     ).order_by('-count')
#     payment_popularity_data = {
#         'labels': [entry['payment_method'] for entry in payment_popularity],
#         'data': [entry['count'] for entry in payment_popularity]
#     }

#     # Recent Orders (simplified)
#     recent_orders = orders.order_by('-created_at')[:5].values(
#         'order_number', 'created_at', 'customer_name', 'total_price', 'order_status'
#     )

#     # Top Products (assuming products field contains product names)
#     product_counts = {}
#     for order in orders:
#         if order.products:
#             products = order.products.split(',')
#             for product in products:
#                 product = product.strip()
#                 if product:
#                     product_counts[product] = product_counts.get(product, 0) + 1
#     top_products = sorted(product_counts.items(), key=lambda x: x[1], reverse=True)[:5]
#     top_products_data = [{'product': item[0], 'count': item[1]} for item in top_products]

#     # Discount Usage
#     discount_usage = orders.values('coupon_code').annotate(
#         times_used=Count('id')
#     ).exclude(coupon_code__isnull=True).order_by('-times_used')[:5]

#     data = {
#         'today_customers': today_customers,
#         'today_products': today_products,
#         'total_orders': total_orders,
#         'total_revenue': float(total_revenue),
#         'orders_revenue': orders_revenue_data,
#         'yearly_sales': yearly_sales_data,
#         'order_status': order_status_data,
#         'payment_method': payment_method_data,
#         'avg_order_value': avg_order_value_data,
#         'payment_popularity': payment_popularity_data,
#         'recent_orders': list(recent_orders),
#         'top_products': top_products_data,
#         'discount_usage': list(discount_usage)
#     }
#     return JsonResponse(data)
# def get_dashboard_data(request):
#     start_date_str = request.GET.get('start_date')
#     end_date_str = request.GET.get('end_date')

#     today = timezone.now().date()

#     if start_date_str and end_date_str:
#         start_date = parse_date(start_date_str)
#         end_date = parse_date(end_date_str)
#     else:
#         end_date = today
#         start_date = end_date - timedelta(days=365)

#     # Filter orders by final date range
#     orders = Order.objects.filter(created_at__date__range=[start_date, end_date])

#     # Today’s stats
#     today_orders = Order.objects.filter(created_at__date=today)
#     today_customers = today_orders.values('customer_email').distinct().count()
#     today_products = 0
#     for order in today_orders:
#         if order.products:
#             products = order.products.split(',')
#             today_products += len(set(products))

#     total_orders = orders.count()
#     total_revenue = orders.aggregate(Sum('total_price'))['total_price__sum'] or 0

#     # Orders and Revenue Over Time (monthly)
#     orders_by_month = orders.annotate(month=TruncMonth('created_at')).values('month').annotate(
#         order_count=Count('id'),
#         revenue=Sum('total_price')
#     ).order_by('month')
#     orders_revenue_data = {
#         'labels': [entry['month'].strftime('%b %Y') for entry in orders_by_month],
#         'orders': [entry['order_count'] for entry in orders_by_month],
#         'revenue': [float(entry['revenue']) for entry in orders_by_month]
#     }

#     # 🔁 Yearly Sales Chart logic: depends on whether it's a custom range
#     if start_date_str and end_date_str:
#         # Custom Range → Single-line Yearly Trend
#         yearly_sales = orders.annotate(year=TruncYear('created_at')).values('year').annotate(
#             total_sales=Sum('total_price')
#         ).order_by('year')
#         yearly_sales_data = {
#             'labels': [entry['year'].strftime('%Y') for entry in yearly_sales],
#             'datasets': [{
#                 'label': 'Total Sales',
#                 'data': [float(entry['total_sales']) for entry in yearly_sales],
#                 'borderColor': 'rgba(75,192,192,1)',
#                 'backgroundColor': 'rgba(75,192,192,0.2)',
#                 'fill': True
#             }]
#         }
#     else:
#         # Default → This Year vs Last Year Monthly Comparison
#         this_year = today.year
#         last_year = this_year - 1
#         orders_this_year = orders.filter(created_at__year=this_year)
#         orders_last_year = orders.filter(created_at__year=last_year)

#         def group_by_month(qs):
#             return qs.annotate(month=TruncMonth('created_at')).values('month').annotate(
#                 total_sales=Sum('total_price')
#             ).order_by('month')

#         this_year_data = group_by_month(orders_this_year)
#         last_year_data = group_by_month(orders_last_year)

#         # Get month labels from this_year_data to align both lines
#         months = [entry['month'].strftime('%b') for entry in this_year_data]

#         yearly_sales_data = {
#             'labels': months,
#             'datasets': [
#                 {
#                     'label': f'{this_year} Sales',
#                     'data': [float(entry['total_sales']) for entry in this_year_data],
#                     'borderColor': 'black',
#                     'backgroundColor': 'rgba(0,0,0,0.2)',
#                     'fill': True
#                 },
#                 {
#                     'label': f'{last_year} Sales',
#                     'data': [float(entry['total_sales']) for entry in last_year_data],
#                     'borderColor': 'gray',
#                     'backgroundColor': 'rgba(128,128,128,0.2)',
#                     'fill': True
#                 }
#             ]
#         }

#     # Other charts — same logic, unaffected
#     order_status_data = {
#         'labels': [],
#         'data': []
#     }
#     order_status = orders.values('order_status').annotate(
#         avg_total=Avg('total_price')
#     ).order_by('order_status')
#     if order_status:
#         order_status_data['labels'] = [entry['order_status'] for entry in order_status]
#         order_status_data['data'] = [float(entry['avg_total']) for entry in order_status]

#     payment_method_data = {
#         'labels': [],
#         'data': []
#     }
#     payment_method = orders.values('payment_method').annotate(
#         total_revenue=Sum('total_price')
#     ).order_by('payment_method')
#     if payment_method:
#         payment_method_data['labels'] = [entry['payment_method'] for entry in payment_method]
#         payment_method_data['data'] = [float(entry['total_revenue']) for entry in payment_method]

#     avg_order_value_data = {
#         'labels': [],
#         'data': []
#     }
#     avg_order_value = orders.values('customer_email').annotate(
#         avg_value=Avg('total_price')
#     ).order_by('-avg_value')[:5]
#     if avg_order_value:
#         avg_order_value_data['labels'] = [entry['customer_email'] for entry in avg_order_value]
#         avg_order_value_data['data'] = [float(entry['avg_value']) for entry in avg_order_value]

#     payment_popularity_data = {
#         'labels': [],
#         'data': []
#     }
#     payment_popularity = orders.values('payment_method').annotate(
#         count=Count('id')
#     ).order_by('-count')
#     if payment_popularity:
#         payment_popularity_data['labels'] = [entry['payment_method'] for entry in payment_popularity]
#         payment_popularity_data['data'] = [entry['count'] for entry in payment_popularity]

#     recent_orders = orders.order_by('-created_at')[:5].values(
#         'order_number', 'created_at', 'customer_name', 'total_price', 'order_status'
#     )

#     product_counts = {}
#     for order in orders:
#         if order.products:
#             products = order.products.split(',')
#             for product in products:
#                 product = product.strip()
#                 if product:
#                     product_counts[product] = product_counts.get(product, 0) + 1
#     top_products = sorted(product_counts.items(), key=lambda x: x[1], reverse=True)[:5]
#     top_products_data = [{'product': item[0], 'count': item[1]} for item in top_products]

#     discount_usage = orders.values('coupon_code').annotate(
#         times_used=Count('id')
#     ).exclude(coupon_code__isnull=True).order_by('-times_used')[:5]

#     return JsonResponse({
#         'today_customers': today_customers,
#         'today_products': today_products,
#         'total_orders': total_orders,
#         'total_revenue': float(total_revenue),
#         'orders_revenue': orders_revenue_data,
#         'yearly_sales': yearly_sales_data,
#         'order_status': order_status_data,
#         'payment_method': payment_method_data,
#         'avg_order_value': avg_order_value_data,
#         'payment_popularity': payment_popularity_data,
#         'recent_orders': list(recent_orders),
#         'top_products': top_products_data,
#         'discount_usage': list(discount_usage)
#     })


## CUSTOMER INSIGHT CSS ### 


/* Customer Insights Specific Styles */

/* Reset default styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Container for the entire page */
.container {
    display: flex;
    min-height: 100vh;
    font-family: 'Roboto', sans-serif;
    background-color: #f5f5f5;
}

/* Sidebar Styles */
.sidebar {
    width: 250px;
    background-color: #1a237e; /* Deep indigo for a professional look */
    color: #ffffff;
    padding: 20px;
    position: fixed;
    height: 100%;
    overflow-y: auto;
}

.sidebar h2 {
    font-size: 24px;
    margin-bottom: 30px;
    text-align: center;
    color: #bbdefb; /* Light blue for contrast */
}

.sidebar ul {
    list-style: none;
}

.sidebar ul li {
    margin-bottom: 15px;
}

.sidebar ul li a {
    color: #bbdefb;
    text-decoration: none;
    font-size: 16px;
    display: block;
    padding: 10px;
    border-radius: 5px;
    transition: background-color 0.3s ease;
}

.sidebar ul li a:hover {
    background-color: #3949ab; /* Lighter indigo on hover */
    color: #ffffff;
}

/* Main Content Styles */
.main-content {
    margin-left: 250px;
    flex: 1;
    padding: 30px;
    background-color: #ffffff;
}

header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
}

header h1 {
    font-size: 28px;
    color: #1a237e;
}

.user-info p {
    font-size: 16px;
    color: #424242;
}

.user-info a {
    color: #1a237e;
    text-decoration: none;
    margin-left: 10px;
}

.user-info a:hover {
    text-decoration: underline;
}

/* Filters Section */
.filters {
    background-color: #e8eaf6; /* Light indigo background */
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 20px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.filters h3 {
    font-size: 20px;
    color: #1a237e;
    margin-bottom: 15px;
}

.filter-group {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

.filter-group label {
    font-size: 14px;
    color: #424242;
    margin-right: 10px;
    width: 100px;
}

.filter-group select,
.filter-group input[type="date"] {
    padding: 8px;
    font-size: 14px;
    border: 1px solid #b0bec5;
    border-radius: 5px;
    background-color: #ffffff;
    width: 200px;
}

#applyFilters {
    padding: 10px 20px;
    background-color: #3949ab;
    color: #ffffff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s ease;
}

#applyFilters:hover {
    background-color: #1a237e;
}

/* Date Range Note */
#dateRangeNote {
    font-size: 14px;
    color: #616161;
    margin-bottom: 20px;
    font-style: italic;
}

/* Charts Section */
.charts {
    display: flex;
    gap: 20px;
    flex-wrap: wrap;
    margin-bottom: 30px;
}

.chart-container {
    flex: 1;
    min-width: 300px;
    background-color: #e3f2fd; /* Light blue background for charts */
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.chart-container h3 {
    font-size: 18px;
    color: #1a237e;
    margin-bottom: 10px;
}

.chart-container p {
    font-size: 14px;
    color: #616161;
    margin-bottom: 15px;
}

.canvas-wrapper {
    position: relative;
    height: 300px;
    width: 100%;
}

canvas {
    width: 100% !important;
    height: 100% !important;
}

/* Customer Details Section */
.customer-details {
    background-color: #ffffff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.customer-details h3 {
    font-size: 20px;
    color: #1a237e;
    margin-bottom: 15px;
}

.customer-details .filter-group {
    margin-bottom: 20px;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

table th,
table td {
    padding: 12px;
    text-align: left;
    font-size: 14px;
    border-bottom: 1px solid #e0e0e0;
}

table th {
    background-color: #e8eaf6;
    color: #1a237e;
    font-weight: 600;
}

table td {
    color: #424242;
}

table tr:hover {
    background-color: #f5f5f5;
}

/* Pagination Styles */
#pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
}

#pagination button {
    padding: 8px 16px;
    background-color: #3949ab;
    color: #ffffff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s ease;
}

#pagination button:disabled {
    background-color: #b0bec5;
    cursor: not-allowed;
}

#pagination button:hover:not(:disabled) {
    background-color: #1a237e;
}

#pagination span {
    padding: 8px 12px;
    font-size: 14px;
    color: #424242;
    cursor: pointer;
    border-radius: 5px;
}

#pagination span.active {
    background-color: #1a237e;
    color: #ffffff;
    font-weight: 600;
}

#pagination span.ellipsis {
    cursor: default;
}

/* Error Message */
#error {
    background-color: #ffebee;
    color: #d32f2f;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 20px;
    font-size: 14px;
}

/* Responsive Design */
@media (max-width: 768px) {
    .container {
        flex-direction: column;
    }

    .sidebar {
        width: 100%;
        position: relative;
        height: auto;
    }

    .main-content {
        margin-left: 0;
        padding: 20px;
    }

    .charts {
        flex-direction: column;
    }

    .filter-group {
        flex-direction: column;
        align-items: flex-start;
    }

    .filter-group label {
        margin-bottom: 5px;
        width: auto;
    }

    .filter-group select,
    .filter-group input[type="date"] {
        width: 100%;
    }
}

html : 

{% load static %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Dashboard</title>
    <link rel="stylesheet" href="{% static 'css/customer_insights.css' %}">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="{% static 'js/customer_insights.js' %}"></script>
</head>
<body>
    <div class="container">
        <div class="sidebar">
            <h2>My Dashboard</h2>
            <ul>
                <li><a href="{% url 'dashboard' %}">Home</a></li>
                <li><a href="{% url 'eda_charts' %}">EDA Charts</a></li>
                <li><a href="{% url 'rfm_analysis' %}">RFM Analysis</a></li>
                <li><a href="{% url 'customer_insights' %}">Customer Insights</a></li>
                <li><a href="{% url 'cohort_analysis' %}">Cohort Analysis</a></li>
                <li><a href="{% url 'financial_insights' %}">Financial Insights</a></li>
                <li><a href="{% url 'product_insights' %}">Product Insights</a></li>
                <li><a href="{% url 'customer_profile' %}">Customer Profile</a></li>
                <li><a href="{% url 'rfm_churn_visualizations' %}">RFM & Churn Trends</a></li>
                <li><a href="{% url 'strategies' %}">Ad Strategies</a></li>
                <li><a href="{% url 'signout' %}">Sign Out</a></li>
            </ul>
        </div>
        <div class="container">
        <div class="main-content">
            <header>
                <h1>Customer Insights</h1>
                <div class="user-info">
                    {% if user.is_authenticated %}
                        <p>Hello, {{ user.username }}!</p>
                    {% else %}
                        <a href="{% url 'signin' %}">Sign In</a>
                        <a href="{% url 'signup' %}">Sign Up</a>
                    {% endif %}
                </div>
            </header>

            <div id="error" style="display: none; color: red;"></div>

            <section class="filters">
                <h3>Filters</h3>
                <div class="filter-group">
                    <label for="dateRangeOption">Date Range Option:</label>
                    <select id="dateRangeOption">
                        <option value="last_1_year">Last 1 Year</option>
                        <option value="all">All Data</option>
                    </select>
                </div>

                <div class="filter-group">
                    <label for="startDate">Start Date:</label>
                    <input type="date" id="startDate">
                </div>

                <div class="filter-group">
                    <label for="endDate">End Date:</label>
                    <input type="date" id="endDate">
                </div>

                <button id="applyFilters">Apply Filters</button>
            </section>

            <section>
                <p id="dateRangeNote">Showing data for the last 1 year (2024-04-01 to 2025-04-01).</p>
            </section>

            <section class="charts">
                <div class="chart-container">
                    <h3>Top Customers by Total Orders</h3>
                    <p>Top 10 customers by number of orders</p>
                    <div class="canvas-wrapper">
                        <canvas id="topCustomersChart"></canvas>
                    </div>
                </div>

                <div class="chart-container">
                    <h3>Customer Order Trend Over Time</h3>
                    <p>Total orders per month</p>
                    <div class="canvas-wrapper">
                        <canvas id="orderTrendChart"></canvas>
                    </div>
                </div>
            </section>

            <section class="customer-details">
                <h3>Customer Details</h3>
                <div class="filter-group">
                    <label for="orderRangeSelect">Order Range:</label>
                    <select id="orderRangeSelect"></select>
                </div>

                <table>
                    <thead>
                        <tr>
                            <th>Customer Name</th>
                            <th>Email</th>
                            <th>Total Orders</th>
                        </tr>
                    </thead>
                    <tbody id="customerTableBody">
                        <!-- Rows will be populated dynamically -->
                    </tbody>
                </table>

                <div id="pagination"></div>
            </section>
        </div>
    </div>
</body>
</html>


### financial_insights ##
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Financial Insights - Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/financial_insights.css' %}">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
</head>
<body>
    <div class="container">
        <!-- Sidebar -->
        <nav class="sidebar">
            <h2>My Dashboard</h2>
            <ul>
                <li><a href="{% url 'dashboard' %}">Home</a></li>
                <li><a href="{% url 'eda_charts' %}">EDA Charts</a></li>
                <li><a href="{% url 'rfm_analysis' %}">RFM Analysis</a></li>
                <li><a href="{% url 'customer_insights' %}">Customer Insights</a></li>
                <li><a href="{% url 'cohort_analysis' %}">Cohort Analysis</a></li>
                <li><a href="{% url 'financial_insights' %}">Financial Insights</a></li>
                <li><a href="{% url 'product_insights' %}">Product Insights</a></li>
                <li><a href="{% url 'customer_profile' %}">Customer Profile</a></li>
                <li><a href="{% url 'rfm_churn_visualizations' %}">RFM & Churn Trends</a></li>
                <li><a href="{% url 'strategies' %}">Ad Strategies</a></li>
                <li><a href="{% url 'signout' %}">Sign Out</a></li>
            </ul>
        </nav>

        <!-- Main Content -->
        <div class="main-content">
            <header>
                <h1>Financial Insights</h1>
                <div class="user-info">
                    {% if user.is_authenticated %}
                        <p>Hello, {{ user.username }}! | <a href="{% url 'signout' %}">Sign Out</a></p>
                    {% else %}
                        <a href="{% url 'signin' %}">Sign In</a> | <a href="{% url 'signup' %}">Sign Up</a>
                    {% endif %}
                </div>
            </header>

            <!-- Error Message -->
            <div id="error" style="display: none;"></div>

            <!-- Filters -->
            <section class="filters">
                <h3>Filters</h3>
                <div class="filter-group">
                    <label for="dateRangeOption">Date Range Option:</label>
                    <select id="dateRangeOption">
                        <option value="last_1_year" selected>Last 1 Year</option>
                        <option value="custom">Custom Dates</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="startDate">Start Date:</label>
                    <input type="date" id="startDate">
                </div>
                <div class="filter-group">
                    <label for="endDate">End Date:</label>
                    <input type="date" id="endDate">
                </div>
                <button id="applyFilters">Apply Filters</button>
            </section>

            <!-- Date Range Note -->
            <p id="dateRangeNote">Showing data for the last 1 year (2024-05-19 to 2025-05-19).</p>

            <!-- Summary Metrics -->
            <section class="summary">
                <h3>Financial Summary</h3>
                <table id="financialSummaryTable">
                    <thead>
                        <tr>
                            <th>Total Revenue ($)</th>
                            <th>Total Shipping ($)</th>
                            <th>Total Tax ($)</th>
                            <th>Total Orders</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td id="totalRevenue">0</td>
                            <td id="totalShipping">0</td>
                            <td id="totalTax">0</td>
                            <td id="orderCount">0</td>
                        </tr>
                    </tbody>
                </table>
            </section>

            <!-- Charts -->
            <section class="charts">
                <!-- Total Revenue Chart -->
                <div class="chart-container" id="revenueChartContainer">
                    <h3>Total Revenue Trend</h3>
                    <p>Monthly revenue over time</p>
                    <div class="canvas-wrapper">
                        <canvas id="revenueChart"></canvas>
                    </div>
                </div>

                <!-- Shipping Charges Chart -->
                <div class="chart-container" id="shippingChargesContainer">
                    <h3>Shipping Charges Trend</h3>
                    <p>Monthly shipping charges over time</p>
                    <div class="canvas-wrapper">
                        <canvas id="shippingChargesChart"></canvas>
                    </div>
                </div>

                <!-- Tax Collected Chart -->
                <div class="chart-container" id="taxCollectedContainer">
                    <h3>Tax Collected by Month</h3>
                    <p>Monthly tax collected over time</p>
                    <div class="canvas-wrapper">
                        <canvas id="taxCollectedChart"></canvas>
                    </div>
                </div>
            </section>
        </div>
    </div>

    <script src="{% static 'js/financial_insights.js' %}"></script>
</body>
</html>



4/6/2025 : last cohort file with inline css 

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Cohort Analysis</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"/>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"/>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" defer></script>
  <style>
    .sidebar-link {
      display: block;
      color: #000;
      padding: 10px 15px;
      text-decoration: none;
      border-radius: 5px;
      font-size: 1rem;
    }

    .sidebar-sub-link {
      display: block;
      color: #000;
      padding: 8px 15px 8px 30px;
      text-decoration: none;
      font-size: 0.9rem;
    }

    .sidebar-link.collapsible .arrow {
      float: right;
      transition: transform 0.2s ease;
    }

    .sidebar-link.collapsible[aria-expanded="true"] .arrow {
      transform: rotate(180deg);
    }
  </style>
</head>
<body style="font-family: 'Roboto', sans-serif; background-color: #f5f5f5; color: #333; margin: 0; padding: 0; display: flex; min-height: 100vh;">
  <div style="display: flex; flex: 1;">
    <!-- Sidebar -->
    <nav style="width: 250px; background-color: #fff; padding: 20px; height: 100vh; position: fixed; top: 0; left: 0; box-shadow: 2px 0 8px rgba(0, 0, 0, 0.1); overflow-y: auto;">
      <h2 style="font-size: 1.5rem; color: #000; margin-bottom: 30px;">Logo</h2>
      <ul style="list-style: none; padding: 0; margin: 0;">
        <li>
          <a href="{% url 'dashboard' %}" class="sidebar-link">Home</a>
        </li>

        <!-- Customers -->
        <li>
          <a class="sidebar-link collapsible" data-bs-toggle="collapse" href="#customersMenu" role="button" aria-expanded="false" aria-controls="customersMenu">
            Customers <i class="bi bi-chevron-down arrow"></i>
          </a>
          <div class="collapse" id="customersMenu">
            <a href="{% url 'customer_insights' %}" class="sidebar-sub-link">Customer Insights</a>
            <a href="{% url 'rfm_analysis' %}" class="sidebar-sub-link">RFM Analysis</a>
            <a href="{% url 'rfm_churn_visualizations' %}" class="sidebar-sub-link">RFM & Churn Trends</a>
            <a href="{% url 'customer_profile' %}" class="sidebar-sub-link">Customer Profiles</a>
          </div>
        </li>

        <!-- Trends -->
        <li>
          <a class="sidebar-link collapsible" data-bs-toggle="collapse" href="#trendsMenu" role="button" aria-expanded="false" aria-controls="trendsMenu">
            Trends <i class="bi bi-chevron-down arrow"></i>
          </a>
          <div class="collapse" id="trendsMenu">
            <a href="{% url 'eda_charts' %}" class="sidebar-sub-link">Data Exploration</a>
            <a href="{% url 'cohort_analysis' %}" class="sidebar-sub-link" style="background-color: #e9ecef; font-weight: 500; color: #000;">Cohort Analysis</a>
          </div>
        </li>

        <!-- Marketing -->
        <li>
          <a class="sidebar-link collapsible" data-bs-toggle="collapse" href="#marketingMenu" role="button" aria-expanded="false" aria-controls="marketingMenu">
            Marketing <i class="bi bi-chevron-down arrow"></i>
          </a>
          <div class="collapse" id="marketingMenu">
            <a href="{% url 'strategies' %}" class="sidebar-sub-link">Ad Strategies</a>
          </div>
        </li>

        <!-- Static Links -->
        <li><a href="{% url 'financial_insights' %}" class="sidebar-link">Finance</a></li>
        <li><a href="{% url 'product_insights' %}" class="sidebar-link">Products</a></li>
        <li><a href="{% url 'signout' %}" class="sidebar-link">Sign Out</a></li>
      </ul>
    </nav>

    <!-- Main content -->
    <main style="margin-left: 250px; padding: 30px; width: calc(100% - 275px); background: #fff; min-height: 100vh;">
      <!-- Navbar -->
      <div style="background-color: #1c1c1c; padding: 12px; border-radius: 10px; display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px;">
        <h1 style="font-size: 2rem; color: white; margin: 0;">Cohort Analysis</h1>
        
        <div class="d-flex align-items-center">
          <select id="dateRangeSelect" class="form-select me-2" style="width: 150px;">
            <option value="last_1_year" selected>Last 1 Year</option>
            <option value="custom">Custom</option>
          </select>
      
          <div id="customDateRange" class="d-flex align-items-center me-2" style="margin-left: 10px;">
            <input type="date" id="dateRangeStart" class="form-control me-2" style="width: 150px;" value="2024-03-28">
            <input type="date" id="dateRangeEnd" class="form-control me-2" style="width: 150px;" value="2025-03-28">
            <button id="applyCustomDate" class="btn btn-primary">Apply</button>
          </div>
      
          <div class="user-info ms-3">
            {% if user.is_authenticated %}
              <a href="#" class="me-3 text-white"><i class="bi bi-person-circle"></i> {{ user.username }}</a>
              <a href="{% url 'signout' %}" class="text-white"><i class="bi bi-box-arrow-right"></i> Logout</a>
            {% else %}
              <a href="{% url 'signin' %}" class="text-white me-3">Sign In</a>
              <a href="{% url 'signup' %}" class="text-white">Sign Up</a>
            {% endif %}
          </div>
        </div>
      </div>
      
            <!-- Error Message -->
            <div id="errorMessage" class="alert alert-danger d-none" style="margin-bottom: 20px;" role="alert"></div>

            <!-- Cohort Revenue Matrix -->
            <div class="card mb-4" style="background-color: #fff; border-radius: 10px; padding: 20px; box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);">
                <div class="card-header" style="background-color: #f8f9fa; padding: 12px; margin-bottom: 15px; display: flex; align-items: center;">
                    <h3 style="font-size: 1.25rem; color: #333; margin: 0; margin-right: 10px;">Cohort Matrix</h3>
                    <span style="color: #666; font-size: 0.9rem;">(<span id="currentDateRange">2024-03-28 to 2025-03-28</span>)</span>
                </div>
                <div class="card-body">
                    <div style="margin-bottom: 15px;">
                        <strong style="color: #333; font-size: 1rem;">Customer Details:</strong>
                        <span style="background-color: #00cc00; color: #000; padding: 2px 8px; border-radius: 4px; margin-left: 10px;">High Revenue ($1000+)</span>
                        <span style="background-color: #99ff99; color: #000; padding: 2px 8px; border-radius: 4px; margin-left: 5px;">Medium Revenue ($750-$1000)</span>
                        <span style="background-color: #ffff99; color: #000; padding: 2px 8px; border-radius: 4px; margin-left: 5px;">Low Revenue ($1-$750)</span>
                        <span style="background-color: #333; color: #fff; padding: 2px 8px; border-radius: 4px; margin-left: 5px;">Zero Revenue ($0)</span>
                    </div>
                    <div id="cohortMatrix" style="overflow-x: auto;"></div>
                </div>
            </div>

            <!-- Cohort Metrics Table -->
            <div class="card" style="background-color: #fff; border-radius: 10px; padding: 0; box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);">
                <div class="card-header" style="background-color: #333; color: white; padding: 12px; display: flex; justify-content: space-between; align-items: center;">
                    <h3 style="font-size: 18px; color: #fff; margin: 0;">Cohort Metrics</h3>
                    <button id="exportCohortMetrics" class="btn btn-primary">Export Data</button>
                </div>
                <div class="card-body" style="padding: 20px;">
                    <table class="table-fancy" style="width: 100%; border-collapse: collapse;">
                        <thead style="background-color: #f8f9fa; color: #333;">
                            <tr>
                                <th style="padding: 10px; font-weight: 500; text-align: left; border-bottom: 1px solid #333;">Cohort</th>
                                <th style="padding: 12px; font-weight: 500; text-align: left; border-bottom: 1px solid #eee;">Size</th>
                                <th style="padding: 12px; font-weight: 500; text-align: left; border-bottom: 1px solid #eee;">Purchase Frequency</th>
                                <th style="padding: 12px; font-weight: 500; text-align: left; border-bottom: 1px solid #eee;">AOV ($)</th>
                                <th style="padding: 12px; font-weight: 500; text-align: left; border-bottom: 1px solid #eee;">Revenue per Customer ($)</th>
                                <th style="padding: 12px; font-weight: 500; text-align: left; border-bottom: 1px solid #eee;">LTV ($)</th>
                            </tr>
                        </thead>
                        <tbody id="summaryTableBody" style="background-color: #fff;"></tbody>
                    </table>
                    <div id="pagination" style="display: flex; justify-content: center; margin-top: 20px;"></div>
                </div>
            </div>
        </main>
    </div>

    <script src="{% static 'js/cohort.js' %}"></script>
</body>
</html>